{"category":"Web Development","version":4,"headline":"Aprenda a desenvolver aplicações web modernas com JavaScript/TypeScript, React e Node.js","colorScheme":"teal","settings":{"showBrandInFooter":true,"showBackdrop":true,"navigationMode":"restricted"},"languageId":"pt-BR","coverImage":"https://pixabay.com/get/g3e78b43369c7dee5e0b645408768fde18e60a0f6914145958e699c753591f6577555dacc47dd239b04d60d8d027f2786cd20065f5a3d52b0b2d1c4f54459c2a9_640.jpg","viewCount":0,"name":"Desenvolvimento Web Moderno","updatedAt":"2024-05-23T03:32:23.912Z","createdAt":"2024-05-23T03:32:23.912Z","keywords":{"keyword2":"TypeScript","keyword1":"JavaScript","keyword3":"React","keyword5":"Web Development","keyword4":"Node.js"},"folderId":null,"format":"onepage","id":"FwGoydDwRHKGnLL8EmW1","conclusion":{"title":"Conclusão","content":"Parabéns por concluir este curso! Você deu um passo importante para liberar todo o seu potencial. Concluir este curso não é apenas adquirir conhecimento; trata-se de colocar esse conhecimento em prática e causar um impacto positivo no mundo ao seu redor."},"teamId":null,"overview":{"content":"Neste curso, você aprenderá os conceitos e técnicas essenciais para desenvolver aplicações web modernas utilizando JavaScript/TypeScript, React e Node.js. Desde a criação de interfaces interativas com React até a construção de APIs robustas com Node.js, você desenvolverá habilidades práticas para criar aplicações escaláveis e de alto desempenho. Além disso, você explorará conceitos importantes como bancos de dados e infraestrutura de TI, e aprenderá como utilizar a nuvem e realizar deploy na plataforma Vercel. Este curso é ideal para desenvolvedores iniciantes ou intermediários que desejam aprimorar suas habilidades e se destacar no mercado de desenvolvimento web.","title":"Visão geral"},"sections":{"topic1_9N7RRuBnK0":{"short":"Internet","blocks":{"htm-URH1JmXJZ5":{"html":"<h2>1. Introdução à Internet e Desenvolvimento Web</h2>\n<h3>1.1 Conceitos Básicos da Internet</h3>\n<h4>História da Internet</h4>\n<p>A ARPANET, uma rede desenvolvida pelo Departamento de Defesa dos Estados Unidos na década de 1960, marca o início da internet. Inicialmente criada para garantir comunicações seguras durante a Guerra Fria, a ARPANET expandiu-se para o uso acadêmico e, posteriormente, para o público em geral, tornando-se a moderna Internet global. Para aprofundar-se na história da internet, é recomendada a leitura do livro <em>“Where Wizards Stay Up Late: The Origins Of The Internet”</em> de Katie Hafner, que oferece uma visão detalhada sobre a criação da ARPANET.</p>\n<h4>Como a Internet Funciona</h4>\n<p>A Internet é composta por uma complexa interconexão de redes físicas e digitais. A seguir, são apresentados os principais componentes desse sistema:</p>\n<ul>\n<li><strong>Servidores</strong>: São computadores que armazenam recursos da web, como vídeos, imagens e aplicações. Esses recursos podem ser acessados pelos usuários através de dispositivos conectados à internet.</li>\n<li><strong>Clientes</strong>: São dispositivos utilizados pelos usuários para acessar informações na internet, como computadores, smartphones e tablets.</li>\n<li><strong>HTTP/HTTPS</strong>: São protocolos de transferência de hipertexto que facilitam a comunicação entre clientes e servidores. O HTTP permite a transferência de dados não criptografados, enquanto o HTTPS adiciona uma camada de segurança, criptografando os dados trocados entre o cliente e o servidor.</li>\n<li><strong>DNS (Sistema de Nomes de Domínio)</strong>: Funciona como um diretório telefônico para a internet, convertendo URLs fáceis de lembrar em endereços IP numéricos. É por meio do DNS que somos capazes de acessar websites digitando seus nomes, em vez de ter que memorizar números complexos.</li>\n<li><strong>ISP (Provedores de Serviços de Internet)</strong>: São empresas responsáveis por fornecer conexões à internet para residências e empresas. Os ISP possibilitam que os usuários acessem a internet por meio de diferentes tecnologias, como banda larga, fibra óptica, 3G/4G, etc.</li>\n</ul>\n<p><strong>Recurso recomendado para estudo</strong>: O curso gratuito “Networking for Web Developers” da Udacity é altamente recomendado para aprofundar os conhecimentos sobre as redes de computadores no contexto do desenvolvimento web. Esse curso oferece uma abordagem prática e abrangente sobre os princípios e tecnologias de rede utilizados por desenvolvedores web.</p>","order":1,"type":"html"}},"slug":"internet","order":1,"name":"Introdução à Internet e Desenvolvimento Web"},"topic4_bSZuCdNUTE":{"order":4,"blocks":{"hig_tEl3utVeFy":{"type":"highlight","content":"O desenvolvimento back-end com Node.js é uma abordagem eficiente para criar aplicações web utilizando JavaScript. O Node.js, com a sua V8 Engine, permite executar código JavaScript do lado do servidor, tornando possível realizar operações de I/O. Além disso, o sistema modular e o ecossistema de pacotes gerenciados pelo NPM facilitam a organização e reutilização de código. O framework Express oferece recursos robustos para lidar com requisições HTTP e facilita a criação de rotas e middleware. E, por fim, o desenvolvimento de uma API RESTful com Node.js e Express seguindo boas práticas de estruturação de projetos, tratamento de erros e testes automatizados é altamente recomendado. Para aprofundar o conhecimento em padrões de design e melhores práticas, o livro “Node.js Design Patterns” de Mario Casciaro é um recurso adicional recomendado.","title":"Conclusão - Desenvolvimento Back-end com Node.js","order":2},"htm-wOmKTDpMuP":{"html":"<h2>4.1 Introdução ao Node.js</h2>\n<p>O Node.js é um ambiente de execução JavaScript do lado do servidor, que utiliza o motor V8 do Google Chrome. Com ele, é possível desenvolver aplicações back-end utilizando a linguagem JavaScript, tradicionalmente associada ao front-end, proporcionando uma experiência de desenvolvimento mais unificada e eficiente.</p>\n<h3>V8 Engine</h3>\n<p>A V8 Engine é o coração do Node.js e permite que o código JavaScript seja executado fora de um navegador. Isso é essencial para realizar operações de I/O (entrada/saída), fundamentais para aplicações back-end.</p>\n<h3>Recurso recomendado</h3>\n<p>Consulte a documentação oficial do Node.js que oferece tutoriais, guias e uma API detalhada para desenvolvedores.</p>\n<h2>4.2 Conceitos Básicos</h2>\n<h3>Módulos e NPM</h3>\n<p>O Node.js possui um sistema modular embutido e um vasto ecossistema de pacotes gerenciados pelo NPM (Node Package Manager). Os módulos ajudam a organizar e reutilizar o código, enquanto o NPM facilita a instalação e atualização de bibliotecas de terceiros.</p>\n<h3>Criação de um Servidor Básico</h3>\n<p>Uma das principais características do Node.js é sua capacidade de lidar com requisições HTTP de maneira eficiente. Utilizando o módulo <code>http</code> nativo, é possível criar um servidor básico. Veja um exemplo de código:</p>\n<pre><code class=\"language-javascript\">const http = require(http);\n\nconst server = http.createServer((req, res) =&gt; {\n  res.statusCode = 200;\n  res.setHeader(Content-Type, text/plain);\n  res.end(Olá Mundo\n);\n});\n\nserver.listen(3000, () =&gt; {\n  console.log(Servidor rodando na porta 3000);\n});\n</code></pre>\n<h2>4.3 Framework Express</h2>\n<p>O Express é um framework minimalista e flexível que proporciona um conjunto robusto de recursos para aplicações web e mobile. Ele facilita a criação de rotas e a utilização de middleware para lidar com requisições.</p>\n<h3>Instalação e Configuração</h3>\n<p>O Express pode ser facilmente instalado via NPM e integrado a um projeto Node.js, simplificando a gestão de rotas, middleware e muito mais.</p>\n<h3>Rotas e Middleware</h3>\n<p>O Express utiliza um sistema de roteamento que permite definir handlers de rotas para diferentes métodos HTTP e caminhos. Além disso, os middlewares são funções que têm acesso ao objeto de requisição (req), objeto de resposta (res) e à próxima função de middleware no ciclo de requisição-resposta.</p>\n<h2>4.4 Comunicação com Banco de Dados</h2>\n<h3>Conexão com PostgreSQL</h3>\n<p>O Node.js é capaz de se conectar a diversos sistemas de banco de dados, incluindo o PostgreSQL. Bibliotecas como o <code>pg</code> (node-postgres) são recomendadas para essa finalidade, pois fornecem um cliente robusto para gerenciar conexões e executar consultas SQL.</p>\n<h3>Operações CRUD</h3>\n<p>CRUD refere-se às quatro operações básicas de persistência de dados: Criação (Create), Leitura (Read), Atualização (Update) e Exclusão (Delete). O Express e o Node.js podem ser usados para construir APIs RESTful que executam essas operações.</p>\n<h2>4.5 Autenticação e Autorização</h2>\n<h3>JWT (JSON Web Tokens)</h3>\n<p>Os JWTs são uma forma popular de implementar autenticação em serviços web. Eles permitem que informações de autenticação sejam geradas, enviadas e validadas de forma segura.</p>\n<h3>Middlewares de Segurança</h3>\n<p>Utilizar middlewares para adicionar camadas de segurança, como verificar tokens JWT ou restringir acessos com base em permissões de usuário, é uma prática recomendada para proteger aplicações Node.js.</p>\n<h2>4.6 Exemplos Práticos</h2>\n<h3>API RESTful</h3>\n<p>Desenvolvimento de uma API RESTful utilizando o Node.js e o Express para gerenciar um sistema de usuários. A API incluirá endpoints para operações CRUD em uma base de dados de usuários.</p>\n<h3>Boas Práticas</h3>\n<ul>\n<li><strong>Estruturação de Projetos</strong>: Organizar o código em módulos lógicos e utilizar padrões como MVC (Model-View-Controller) para separação de responsabilidades.</li>\n<li><strong>Tratamento de Erros</strong>: Implementar uma gestão de erros robusta, incluindo middlewares de erros personalizados.</li>\n<li><strong>Testes Automatizados</strong>: Utilizar bibliotecas como o Mocha e o Chai para escrever testes que ajudam a garantir a estabilidade da aplicação.</li>\n</ul>\n<h3>Recursos adicionais</h3>\n<p>O livro &quot;Node.js Design Patterns&quot; de Mario Casciaro oferece um aprofundamento em padrões de design avançados e melhores práticas para o desenvolvimento com Node.js.</p>","type":"html","order":1}},"name":"Desenvolvimento Back-end com Node.js","short":"Back-end","slug":"back-end"},"qui_9T5OcQqtE8":{"order":9,"slug":"quiz","headline":"Verifique o seu conhecimento respondendo a algumas perguntas","short":"Questionário","blocks":{"8ZbML9mOSn":{"questions":{"mul_epVOv4SrLO":{"type":"multiple-choice","choices":{"cho_1utbq1Fy97":{"order":1,"choice":"Um ambiente de execução JavaScript do lado do servidor","correct":true},"cho_hzs3uFt68B":{"choice":"Uma biblioteca JavaScript para construir interfaces de usuário","correct":false,"order":2},"cho_Ij5xAL37TE":{"correct":false,"choice":"Um sistema de banco de dados relacional","order":3}},"order":9,"question":"O que é o Node.js?"},"mul_JPQuzTKBQL":{"order":8,"choices":{"cho_uEcgErNfNj":{"order":2,"correct":true,"choice":"React"},"cho_fKym0vyYPX":{"order":3,"correct":false,"choice":"Vue.js"},"cho_oWhZ58nD4T":{"correct":false,"choice":"Angular","order":1}},"question":"Qual é o principal framework para construir interfaces de usuário em JavaScript/TypeScript?","type":"multiple-choice"},"mul_cJLtBEXKgI":{"choices":{"cho_eZHKlwrf3x":{"choice":"Uma biblioteca JavaScript para construir interfaces de usuário","correct":false,"order":1},"cho_iC8YGM4boc":{"choice":"Uma extensão de sintaxe para JavaScript recomendada pelo React","order":3,"correct":false},"cho_vFaV2XciaY":{"order":2,"correct":true,"choice":"Uma linguagem de programação baseada em JavaScript que adiciona tipagem estática"}},"question":"O que é o TypeScript?","order":7,"type":"multiple-choice"},"mul_VG4JQAE4k7":{"type":"multiple-choice","choices":{"cho_12BhR4w0jA":{"choice":"Um sistema de banco de dados relacional de código aberto","order":2,"correct":true},"cho_3YLDwI0CUJ":{"order":3,"correct":false,"choice":"Uma biblioteca JavaScript para construir interfaces de usuário"},"cho_Xyay5GziEN":{"correct":false,"choice":"Um ambiente de execução JavaScript do lado do servidor","order":1}},"order":10,"question":"O que é o PostgreSQL?"},"mul_geSMd9zv1D":{"order":5,"type":"multiple-choice","question":"O que é o Back-end no desenvolvimento web?","choices":{"cho_Eu4GnLdFDD":{"correct":false,"order":1,"choice":"Inclui todos os aspectos da experiência do usuário no site, desde o design até a interação"},"cho_RaxCtus1fS":{"correct":false,"order":3,"choice":"Protocolos de transferência de hipertexto"},"cho_amyt9wiTzG":{"choice":"Responsável pela lógica de negócios, armazenamento de dados e manipulação de segurança","correct":true,"order":2}}},"mul_9hJ83dFmc1":{"choices":{"cho_m9IvKNrUBB":{"choice":"TCP/IP","correct":false,"order":3},"cho_UbnNaF20VX":{"order":2,"choice":"WWW","correct":false},"cho_CRUo3xColi":{"correct":true,"choice":"ARPANET","order":1}},"order":1,"question":"Qual foi a rede que deu origem à Internet?","type":"multiple-choice"},"mul_tqMBwWmjVv":{"type":"multiple-choice","question":"O que são servidores?","choices":{"cho_cMQspmtggM":{"choice":"Computadores que armazenam recursos da web","correct":true,"order":1},"cho_ngs5vm65FQ":{"choice":"Protocolos de transferência de hipertexto","order":3,"correct":false},"cho_hnZ5PM7YMl":{"order":2,"choice":"Dispositivos que os usuários utilizam para acessar informações na internet","correct":false}},"order":2},"mul_kfydl8DpT9":{"question":"O que são APIs?","type":"multiple-choice","order":6,"choices":{"cho_XMLOC8x7lE":{"choice":"Métodos HTTP para ações como ler ou modificar dados","order":1,"correct":false},"cho_D2jkZdqLhP":{"correct":true,"order":2,"choice":"Permitem que diferentes sistemas e aplicações se comuniquem de maneira eficaz"},"cho_g99SFKfjRU":{"choice":"Bancos de dados relacionais como PostgreSQL","correct":false,"order":3}}},"mul_BS25PbUNwp":{"type":"multiple-choice","choices":{"cho_L06NbQVnrX":{"order":1,"correct":true,"choice":"Converter URLs fáceis de lembrar em endereços IP numéricos"},"cho_VDEAOgYXgH":{"choice":"Gerenciar e provisionar a infraestrutura de TI","order":2,"correct":false},"cho_DgHQ4HJPs3":{"order":3,"correct":false,"choice":"Fornecer conexões à Internet para residências e empresas"}},"order":3,"question":"Qual o papel do DNS (Sistema de Nomes de Domínio) na Internet?"},"mul_oyeEznm7LJ":{"order":4,"type":"multiple-choice","choices":{"cho_Tf5jS1ALMp":{"correct":false,"order":1,"choice":"Responsável pela lógica de negócios, armazenamento de dados e manipulação de segurança"},"cho_S9SwjPwV0u":{"order":2,"choice":"Inclui todos os aspectos da experiência do usuário no site, desde o design até a interação","correct":true},"cho_42VRbsYoyX":{"correct":false,"order":3,"choice":"Baseia-se em métodos HTTP para ações como ler ou modificar dados"}},"question":"O que é o Front-end no desenvolvimento web?"}},"type":"quiz","order":1,"config":{"cannotProgressWhenFailed":false,"allowReview":"never","allowRetry":"never","showAllQuestionsInPage":true,"showIntro":false,"gradedQuiz":true,"advanceOnSubmit":true,"randomizeQuestions":true,"showCorrectAnswers":false,"showStudentAnswers":true,"showScore":true},"labels":{"PassingScore":"Pontuação de aprovação:","passed":"aprovado","failed":"reprovado","Question":"Pergunta","Submit":"Enviar","StartQuiz":"Iniciar teste","Advance":"Avançar","Retry":"Tentar novamente","Review":"Rever","YourScore":"Sua pontuação:"}}},"name":"Questionário"},"wrapup":{"short":"Resumo","blocks":{"lis_bnvOsnlgw9":{"view":"checklist","type":"list","items":{"ite_sJChj1taRn":{"content":"Os bancos de dados desempenham um papel crucial em sistemas digitais, desde sites simples até aplicações corporativas complexas. O PostgreSQL se destaca como um sistema de banco de dados relacional de código aberto conhecido por sua conformidade com os padrões SQL, extensibilidade e confiabilidade. Através da biblioteca pg e do ORM Sequelize, é possível integrar o Node.js com o PostgreSQL de forma eficiente. Além disso, o curso de Stephen Grider oferece um tutorial completo para aprender e aprimorar as habilidades em PostgreSQL. Consolidar boas práticas, como normalização de dados, segurança e backup, são essenciais para garantir a eficácia e a integridade dos sistemas. Aprender sobre bancos de dados e PostgreSQL é fundamental para o desenvolvimento web moderno.","order":4,"title":"Bancos de Dados e PostgreSQL"},"ite_y1QqvhbF1m":{"content":"Neste conteúdo, aprendemos sobre os fundamentos de JavaScript e TypeScript. Uma linguagem de programação é essencial para controlar o comportamento de uma máquina e expressar algoritmos. JavaScript é uma linguagem dinâmica e flexível, enquanto o TypeScript adiciona tipagem estática opcional. Ambas as linguagens são amplamente utilizadas em diversas aplicações, desde páginas web interativas até servidores e aplicações móveis. É importante conhecer a sintaxe básica, como variáveis, funções e estruturas de controle. Recursos recomendados, como livros e cursos online, podem auxiliar no aprendizado e aprofundamento dessas linguagens. Com os conhecimentos adquiridos nesse conteúdo, os estudantes estarão melhor preparados para desenvolver projetos em desenvolvimento web moderno.","title":"Fundamentos de JavaScript e TypeScript","order":1},"ite_hbV2e5IKUS":{"content":"Concluindo, o estudo sobre infraestrutura, nuvem e deploy na Vercel é essencial para os desenvolvedores web modernos. A infraestrutura em TI, composta por servidores, redes e armazenamento, é fundamental para operar e gerenciar aplicações empresariais. A computação em nuvem oferece flexibilidade e escalabilidade, com provedores populares como AWS, Google Cloud Platform, Microsoft Azure e Vercel. A metodologia DevOps, aliada à Integração Contínua e Entrega Contínua, acelera o processo de entrega de software. Por fim, a plataforma Vercel simplifica o deploy de aplicações front-end e funções serverless, proporcionando uma experiência aprimorada para os desenvolvedores. Ao seguir boas práticas de monitoramento, registro de logs e manutenção pós-deploy, os desenvolvedores garantem o desempenho ideal de suas aplicações. Recursos adicionais como a documentação da Vercel e o curso “Fullstack Advanced React & GraphQL” de Wes Bos podem ser consultados para aprofundar o conhecimento nessa área.","title":"Infraestrutura, Nuvem e Deploy na Vercel","order":5},"ite_RkKEMOgn2q":{"content":"O desenvolvimento back-end com Node.js é uma abordagem eficiente para criar aplicações web utilizando JavaScript. O Node.js, com a sua V8 Engine, permite executar código JavaScript do lado do servidor, tornando possível realizar operações de I/O. Além disso, o sistema modular e o ecossistema de pacotes gerenciados pelo NPM facilitam a organização e reutilização de código. O framework Express oferece recursos robustos para lidar com requisições HTTP e facilita a criação de rotas e middleware. E, por fim, o desenvolvimento de uma API RESTful com Node.js e Express seguindo boas práticas de estruturação de projetos, tratamento de erros e testes automatizados é altamente recomendado. Para aprofundar o conhecimento em padrões de design e melhores práticas, o livro “Node.js Design Patterns” de Mario Casciaro é um recurso adicional recomendado.","order":3,"title":"Desenvolvimento Back-end com Node.js"},"ite_x2D9snFEhc":{"content":"O Desenvolvimento Front-end com React é uma parte fundamental do curso Desenvolvimento Web Moderno. Através do React, é possível criar interfaces de usuário eficientes e de forma simplificada, utilizando componentes encapsulados. O uso de conceitos como JSX, Componentes Funcionais, State e Props, Hooks, React Router e Gerenciamento de Estado são abordados no curso, permitindo ao aluno construir aplicações complexas e de alta qualidade. Além disso, são apresentados exemplos práticos e boas práticas para auxiliar no desenvolvimento. Com recursos recomendados, como a documentação oficial do React e o curso “React - The Complete Guide” de Maximilian Schwarzmüller no Udemy, os alunos têm acesso a todo o conhecimento necessário para se tornarem desenvolvedores front-end proficientes com React.","title":"Desenvolvimento Front-end com React","order":2}},"order":1}},"headline":"Vamos rever o que acabamos de ver até agora","name":"Resumo","order":8,"slug":"wrapup"},"topic5_nrtIAPh6ts":{"short":"Bancos","order":5,"name":"Bancos de Dados e PostgreSQL","blocks":{"hig_tvgHE0da0S":{"order":2,"type":"highlight","title":"Conclusão - Bancos de Dados e PostgreSQL","content":"Os bancos de dados desempenham um papel crucial em sistemas digitais, desde sites simples até aplicações corporativas complexas. O PostgreSQL se destaca como um sistema de banco de dados relacional de código aberto conhecido por sua conformidade com os padrões SQL, extensibilidade e confiabilidade. Através da biblioteca pg e do ORM Sequelize, é possível integrar o Node.js com o PostgreSQL de forma eficiente. Além disso, o curso de Stephen Grider oferece um tutorial completo para aprender e aprimorar as habilidades em PostgreSQL. Consolidar boas práticas, como normalização de dados, segurança e backup, são essenciais para garantir a eficácia e a integridade dos sistemas. Aprender sobre bancos de dados e PostgreSQL é fundamental para o desenvolvimento web moderno."},"htm-u5cEyEMqgu":{"order":1,"type":"html","html":"<h1>5. Bancos de Dados e PostgreSQL</h1>\n<p>PostgreSQL é um sistema de banco de dados relacional de código aberto conhecido por sua robustez e conformidade com padrões SQL. Neste tópico, exploraremos o que são bancos de dados, os tipos de bancos de dados existentes e a importância do PostgreSQL como sistema de gerenciamento de bancos de dados.</p>\n<h2>O que são Bancos de Dados?</h2>\n<p>Bancos de dados são sistemas projetados para armazenar, recuperar e gerenciar dados de maneira estruturada. Eles são cruciais para quase todas as formas de sistemas digitais, desde sites simples até aplicações corporativas complexas.</p>\n<h3>Definição e Tipos</h3>\n<p>Existem principalmente dois tipos de bancos de dados:</p>\n<ul>\n<li><strong>Relacionais (SQL)</strong>: Armazenam dados em tabelas inter-relacionadas e usam SQL (Structured Query Language) para manipular dados. Exemplos incluem PostgreSQL, MySQL e Oracle.</li>\n<li><strong>Não-relacionais (NoSQL)</strong>: Armazenam dados em formatos mais flexíveis como documentos, chave-valor, grafos ou colunas amplas. Exemplos incluem MongoDB, Cassandra e Neo4j.</li>\n</ul>\n<p>Recomendamos o livro &quot;Database System Concepts&quot; de Abraham Silberschatz, um texto clássico que oferece uma compreensão profunda dos fundamentos dos bancos de dados.</p>\n<h2>PostgreSQL</h2>\n<p>PostgreSQL, frequentemente chamado simplesmente de Postgres, é um sistema de banco de dados relacional de código aberto conhecido por sua robustez e conformidade com padrões SQL.</p>\n<h3>Vantagens</h3>\n<ul>\n<li><strong>Conformidade com SQL</strong>: Suporta uma ampla variedade de funcionalidades SQL padrão e adicionais.</li>\n<li><strong>Extensibilidade</strong>: Permite que os usuários definam seus próprios tipos de dados, operadores e funções.</li>\n<li><strong>Confiabilidade e Robustez</strong>: Fornece características avançadas como transações ACID (Atomicidade, Consistência, Isolamento, Durabilidade), recuperação de desastres e replicação de dados.</li>\n</ul>\n<h2>Instalação e Configuração</h2>\n<h3>Instalação</h3>\n<p>PostgreSQL pode ser instalado em diversas plataformas. Para sistemas baseados em Linux, o <code>apt</code> ou <code>yum</code> podem ser usados para uma instalação direta. No Windows, o instalador interativo disponibilizado pela EnterpriseDB é recomendado.</p>\n<h3>Configuração Inicial</h3>\n<p>Após a instalação, a configuração inicial envolve criar uma nova instância de banco de dados e configurar as permissões de acesso.</p>\n<pre><code class=\"language-sql\">CREATE DATABASE mydatabase;\nCREATE USER myuser WITH ENCRYPTED PASSWORD mypassword;\nGRANT ALL PRIVILEGES ON DATABASE mydatabase TO myuser;\n</code></pre>\n<h2>Operações Básicas</h2>\n<h3>Comandos SQL</h3>\n<p>Operações comuns de banco de dados envolvem quatro operações CRUD:</p>\n<ul>\n<li><strong>CREATE</strong>: Para criar novas tabelas e inserir dados.</li>\n<li><strong>READ</strong>: Para consultar e ler os dados.</li>\n<li><strong>UPDATE</strong>: Para atualizar dados existentes.</li>\n<li><strong>DELETE</strong>: Para remover dados.</li>\n</ul>\n<p>Exemplo de um comando básico para inserir dados:</p>\n<pre><code class=\"language-sql\">INSERT INTO users (name, email) VALUES (Alice, alice@example.com);\n</code></pre>\n<h3>Índices e Performance</h3>\n<p>Índices são usados para acelerar a recuperação de dados sem ter que examinar cada linha de uma tabela. Criar índices apropriados é essencial para melhorar a performance de consultas em bancos de dados grandes.</p>\n<h2>Integração com Node.js</h2>\n<h3>Biblioteca pg</h3>\n<p>Node.js se conecta ao PostgreSQL através da biblioteca <code>pg</code>, que é um cliente PostgreSQL para Node.js. Ela permite a execução de consultas SQL e o gerenciamento de conexões.</p>\n<h3>ORM Sequelize</h3>\n<p>Sequelize é um ORM (Object-Relational Mapper) para Node.js que suporta PostgreSQL, MySQL, MariaDB, SQLite e Microsoft SQL Server. Ele abstrai a interação do banco de dados em objetos JavaScript, permitindo um desenvolvimento mais intuitivo e seguro.</p>\n<h2>Exemplos Práticos</h2>\n<h3>Aplicação Exemplo</h3>\n<p>Construir um sistema de gerenciamento de usuários que inclui operações de adição, consulta, atualização e exclusão de usuários. Esta aplicação usará Node.js, Express e PostgreSQL para demonstrar uma aplicação full-stack.</p>\n<h3>Boas Práticas</h3>\n<ul>\n<li><strong>Normalização de Dados</strong>: Divida os dados em tabelas para minimizar a redundância e dependência.</li>\n<li><strong>Segurança</strong>: Utilize conexões criptografadas e medidas robustas de autenticação e autorização.</li>\n<li><strong>Backup e Recuperação</strong>: Implemente estratégias regulares de backup e teste planos de recuperação.</li>\n</ul>\n<p>Recomendamos o curso &quot;SQL and PostgreSQL: The Complete Developers Guide&quot; de Stephen Grider no Udemy, que oferece um tutorial extenso e prático sobre PostgreSQL.</p>"}},"slug":"bancos"},"topic6_iNZ1rHTRGw":{"blocks":{"hig_k0vXXauMjM":{"title":"Conclusão - Infraestrutura, Nuvem e Deploy na Vercel","content":"Concluindo, o estudo sobre infraestrutura, nuvem e deploy na Vercel é essencial para os desenvolvedores web modernos. A infraestrutura em TI, composta por servidores, redes e armazenamento, é fundamental para operar e gerenciar aplicações empresariais. A computação em nuvem oferece flexibilidade e escalabilidade, com provedores populares como AWS, Google Cloud Platform, Microsoft Azure e Vercel. A metodologia DevOps, aliada à Integração Contínua e Entrega Contínua, acelera o processo de entrega de software. Por fim, a plataforma Vercel simplifica o deploy de aplicações front-end e funções serverless, proporcionando uma experiência aprimorada para os desenvolvedores. Ao seguir boas práticas de monitoramento, registro de logs e manutenção pós-deploy, os desenvolvedores garantem o desempenho ideal de suas aplicações. Recursos adicionais como a documentação da Vercel e o curso “Fullstack Advanced React & GraphQL” de Wes Bos podem ser consultados para aprofundar o conhecimento nessa área.","order":2,"type":"highlight"},"htm-9H1QVzu4o0":{"html":"<h2>6.1 O que é Infraestrutura?</h2>\n<p>A infraestrutura de TI engloba o conjunto de hardware, software, redes e serviços necessários para operar, gerenciar e monitorar aplicações empresariais. Ela inclui componentes físicos, como servidores e dispositivos de armazenamento, e software que ajuda a orquestrar e automatizar operações.</p>\n<p><strong>Componentes</strong></p>\n<ul>\n<li><strong>Servidores</strong>: Máquinas físicas ou virtuais que hospedam aplicações e serviços.</li>\n<li><strong>Redes</strong>: Conexões que permitem a comunicação entre servidores, dispositivos de usuário e a internet.</li>\n<li><strong>Armazenamento</strong>: Soluções para guardar dados de forma segura e acessível.</li>\n</ul>\n<h2>6.2 Computação em Nuvem</h2>\n<p>A computação em nuvem permite o acesso a recursos de computação, como servidores, armazenamento e bancos de dados, por meio da internet. Empresas de todos os tamanhos estão adotando a nuvem devido à flexibilidade, escalabilidade e eficiência de custo que ela oferece.</p>\n<p><strong>Provedores Populares</strong></p>\n<ul>\n<li><strong>AWS (Amazon Web Services)</strong>: Líder de mercado, oferece uma vasta gama de serviços em cloud.</li>\n<li><strong>Google Cloud Platform</strong>: Conhecido por suas soluções de análise de dados e aprendizado de máquina.</li>\n<li><strong>Microsoft Azure</strong>: Forte em soluções empresariais e integrações com softwares Microsoft.</li>\n<li><strong>Vercel</strong>: Especializada em hospedagem de front-end e funções serverless para aplicações web modernas.</li>\n</ul>\n<h2>6.3 DevOps e CI/CD</h2>\n<h3>DevOps</h3>\n<p>DevOps é uma metodologia que combina desenvolvimento de software (Dev) e operações de TI (Ops) para agilizar e otimizar o processo de entrega de software. Ela enfatiza a colaboração, automação e monitoramento contínuo.</p>\n<h3>CI/CD (Integração Contínua e Entrega Contínua)</h3>\n<ul>\n<li><strong>Integração Contínua</strong>: Automatiza a compilação e teste de código cada vez que uma alteração é feita.</li>\n<li><strong>Entrega Contínua</strong>: Automatiza o lançamento do software, permitindo que alterações sejam rapidamente disponibilizadas para produção.</li>\n</ul>\n<h2>6.4 Deploy na Vercel</h2>\n<p>A Vercel é uma plataforma de cloud focada em melhorar a experiência de desenvolvimento e deploy de aplicações front-end e funções serverless. Ela oferece integração contínua, visualização de deploy e escalabilidade automática.</p>\n<h3>Configuração Inicial</h3>\n<p>Para começar com a Vercel, os desenvolvedores precisam criar uma conta, conectar seu repositório de código e configurar o projeto para deploy. A Vercel suporta projetos React, Next.js, entre outros.</p>\n<h3>Deploy</h3>\n<p>O processo de deploy na Vercel é simplificado:</p>\n<ol>\n<li>Faça push do seu código para o repositório conectado (GitHub, GitLab, Bitbucket).</li>\n<li>A Vercel detecta a mudança, inicia o processo de compilação e deploy.</li>\n<li>Você pode visualizar a versão de preview antes de disponibilizá-la para produção.</li>\n</ol>\n<h2>6.5 Exemplos Práticos</h2>\n<h3>Projeto Exemplo</h3>\n<p>Demonstração de como fazer o deploy de uma aplicação React com Next.js na Vercel, mostrando a integração de front-end com APIs e funções serverless para criar uma aplicação dinâmica e escalável.</p>\n<h3>Boas Práticas</h3>\n<ul>\n<li><strong>Monitoramento</strong>: Utilize as ferramentas de monitoramento da Vercel para acompanhar o desempenho e a saúde da aplicação.</li>\n<li><strong>Logs</strong>: Mantenha um registro detalhado de logs para diagnóstico rápido de problemas.</li>\n<li><strong>Manutenção Pós-Deploy</strong>: Implemente alertas e automatize a escalabilidade conforme necessário para garantir o desempenho ideal.</li>\n</ul>\n<p><strong>Recursos adicionais</strong>: A própria documentação da Vercel e o curso “Fullstack Advanced React &amp; GraphQL” de Wes Bos, que abrange técnicas modernas de desenvolvimento e deploy.</p>","order":1,"type":"html"}},"name":"Infraestrutura, Nuvem e Deploy na Vercel","order":6,"short":"Infraestrutura","slug":"infraestrutura"},"topic2_Twg7Fa2upy":{"name":"Fundamentos de JavaScript e TypeScript","short":"Fundamentos","slug":"fundamentos","blocks":{"htm-qhtzBlcVZC":{"type":"html","html":"<h2>2.1 O que é uma Linguagem de Programação?</h2>\n<p>Uma linguagem de programação é uma forma padronizada de comunicar instruções a um computador. Ela é usada para controlar o comportamento de uma máquina e expressar algoritmos. Existem várias linguagens de programação populares, como JavaScript, Python, C++ e Java. Cada linguagem tem suas próprias regras sintáticas e semânticas que definem como os programas são escritos e funcionam.</p>\n<p>Um recurso recomendado para entender os fundamentos da computação e programação é o livro &quot;Code: The Hidden Language of Computer Hardware and Software&quot;, escrito por Charles Petzold. Este livro oferece uma exploração acessível dos conceitos básicos da computação.</p>\n<h2>2.2 Introdução ao JavaScript</h2>\n<h3>História</h3>\n<p>JavaScript foi criado por Brendan Eich em 1995 e rapidamente se tornou uma das linguagens de programação mais utilizadas no mundo. Originalmente, foi desenvolvido para adicionar interatividade às páginas web, mas agora é usado em diversos tipos de aplicações, desde servidores com Node.js até aplicações móveis.</p>\n<h3>Sintaxe Básica</h3>\n<p>JavaScript é uma linguagem dinâmica e flexível com uma sintaxe que pode ser fácil para iniciantes e poderosa para desenvolvedores experientes. Alguns conceitos fundamentais incluem:</p>\n<ul>\n<li><p><strong>Variáveis</strong>: São utilizadas para armazenar dados que podem ser usados e modificados pelo programa. As palavras-chave <code>let</code> e <code>const</code> são utilizadas para declarar variáveis modernas.</p>\n</li>\n<li><p><strong>Funções</strong>: São blocos de código designados para executar tarefas específicas. As funções podem ser declaradas tradicionalmente ou como funções de seta (arrow functions).</p>\n</li>\n<li><p><strong>Loops e Condicionais</strong>: Estruturas como <code>for</code>, <code>while</code> e <code>if-else</code> são utilizadas para controlar o fluxo do programa com base em condições.</p>\n</li>\n</ul>\n<p><strong>Exemplos Práticos</strong></p>\n<pre><code class=\"language-javascript\">// Um exemplo simples de função\nfunction saudacao(nome) {\n  console.log(&quot;Olá, &quot; + nome + &quot;!&quot;);\n}\n\nsaudacao(&quot;Maria&quot;); // Saída: Olá, Maria!\n</code></pre>\n<p>Um recurso recomendado para aprender mais sobre JavaScript é o livro &quot;Eloquent JavaScript&quot;, escrito por Marijn Haverbeke. Esse livro é gratuito e está disponível online, abrangendo desde os fundamentos até conceitos avançados de JavaScript.</p>\n<h2>2.3 Introdução ao TypeScript</h2>\n<h3>O que é TypeScript?</h3>\n<p>TypeScript é um superconjunto de JavaScript desenvolvido pela Microsoft que adiciona tipagem estática opcional à linguagem. Isso significa que é possível especificar tipos de dados para variáveis, funções e outras estruturas, o que ajuda a prevenir muitos erros comuns de programação.</p>\n<h3>Vantagens</h3>\n<ul>\n<li><p><strong>Tipagem Estática</strong>: Facilita o gerenciamento de grandes bases de código e melhora a legibilidade.</p>\n</li>\n<li><p><strong>Ferramentas de Desenvolvimento</strong>: Oferece recursos avançados de autocompletação, refatoração e verificação de código em editores como o VSCode.</p>\n</li>\n</ul>\n<p><strong>Exemplos Práticos</strong></p>\n<pre><code class=\"language-typescript\">// Um exemplo simples de TypeScript\nfunction saudacao(nome: string): void {\n  console.log(&quot;Olá, &quot; + nome + &quot;!&quot;);\n}\n\nsaudacao(&quot;Carlos&quot;); // Saída: Olá, Carlos!\n</code></pre>\n<p>Um recurso recomendado para aprender mais sobre o TypeScript é o curso &quot;Understanding TypeScript&quot; de Maximilian Schwarzmüller na plataforma Udemy. Esse curso oferece um guia detalhado sobre como usar o TypeScript em projetos reais.</p>","order":1},"hig_chZYZ6LqRU":{"content":"Neste conteúdo, aprendemos sobre os fundamentos de JavaScript e TypeScript. Uma linguagem de programação é essencial para controlar o comportamento de uma máquina e expressar algoritmos. JavaScript é uma linguagem dinâmica e flexível, enquanto o TypeScript adiciona tipagem estática opcional. Ambas as linguagens são amplamente utilizadas em diversas aplicações, desde páginas web interativas até servidores e aplicações móveis. É importante conhecer a sintaxe básica, como variáveis, funções e estruturas de controle. Recursos recomendados, como livros e cursos online, podem auxiliar no aprendizado e aprofundamento dessas linguagens. Com os conhecimentos adquiridos nesse conteúdo, os estudantes estarão melhor preparados para desenvolver projetos em desenvolvimento web moderno.","type":"highlight","order":2,"title":"Conclusão - Fundamentos de JavaScript e TypeScript"}},"order":2},"practice":{"headline":"Vamos colocar os seus conhecimentos em prática","slug":"practice","short":"Prática","name":"Exercícios Práticos","blocks":{"lis_7XCHrfcrjs":{"type":"list","view":"accordion","items":{"3oDVOVUcJ6":{"order":5,"content":"Neste exercício, você criará um sistema de cadastro de usuários utilizando PostgreSQL como banco de dados. A aplicação permitirá a criação, leitura, atualização e exclusão de usuários.","title":"Cadastro de Usuários com PostgreSQL"},"GOh1rb2qZ6":{"content":"Neste exercício, você criará uma lista de tarefas utilizando React, onde o usuário poderá adicionar, marcar como concluída e excluir tarefas.","order":3,"title":"Lista de Tarefas em React"},"FyPPKfn1nq":{"content":"Neste exercício, você aprenderá a realizar o deploy de uma aplicação React na plataforma Vercel, que oferece integração contínua, escalabilidade automática e preview de deploy.","title":"Deploy de Aplicação React na Vercel","order":6},"on3W43NQOB":{"content":"Neste exercício, você criará uma página HTML básica com cabeçalho, parágrafo e uma imagem.","order":1,"title":"Criando uma página HTML básica"},"5vF2A6R7HG":{"content":"Neste exercício, você criará uma API Restful utilizando Node.js e Express para gerenciar uma lista de usuários, incluindo operações de criação, leitura, atualização e exclusão.","order":4,"title":"API Restful com Node.js"},"0xXdlX4aNU":{"content":"Neste exercício, você criará uma calculadora simples em JavaScript que realiza operações básicas como soma, subtração, multiplicação e divisão.","title":"Calculadora em JavaScript","order":2}},"order":2},"htm_jo6Dr25tM2":{"order":1,"type":"html","html":"<p>Nesta lição, colocaremos a teoria em prática por meio de atividades práticas. Clique nos itens abaixo para conferir cada exercício e desenvolver habilidades práticas que o ajudarão a ter sucesso na disciplina.</p>"}},"order":7},"topic3_LH8NOSn6Wr":{"order":3,"slug":"front-end","blocks":{"htm-MNUGCniYBZ":{"type":"html","order":1,"html":"<h3>3.1 Introdução ao React</h3>\n<p>O React é uma biblioteca JavaScript criada pelo Facebook para construir interfaces de usuário de maneira eficiente e com menos código. Ele utiliza um conceito chamado de componentes, que permite aos desenvolvedores construir aplicações complexas dividindo-os em partes menores e encapsuladas que gerenciam seu próprio estado.</p>\n<p><strong>Recurso recomendado</strong>: A documentação oficial do React oferece um tutorial introdutório e guias abrangentes para aprender mais sobre React.</p>\n<h3>3.2 Conceitos Básicos do React</h3>\n<h4>JSX</h4>\n<p>JSX é uma extensão de sintaxe para JavaScript recomendada pelo React. Ele permite escrever HTML no código JavaScript, facilitando a construção de interfaces de usuário e tornando a visualização dos componentes mais intuitiva.</p>\n<h4>Componentes Funcionais vs. Componentes de Classe</h4>\n<ul>\n<li><strong>Componentes de Classe</strong>: Eram o padrão anterior para criar componentes com estado e ciclo de vida. Eles são criados como classes e podem ter acesso ao estado interno e aos métodos de ciclo de vida do React.</li>\n<li><strong>Componentes Funcionais</strong>: Com a introdução dos Hooks, se tornaram a maneira mais moderna e simplificada de construir componentes. Eles são escritos como funções e não possuem ciclo de vida, mas podem usar Hooks para ter acesso a funcionalidades de estado e outros recursos do React.</li>\n</ul>\n<h4>State e Props</h4>\n<ul>\n<li><strong>State</strong>: Refere-se ao estado interno de um componente, onde são armazenadas informações que podem mudar ao longo do tempo. O estado pode ser atualizado utilizando a função <code>setState()</code>, o que aciona a renderização do componente.</li>\n<li><strong>Props</strong>: São as propriedades que um componente pai passa para seus componentes filhos. As props são somente leitura e não podem ser modificadas pelo componente filho.</li>\n</ul>\n<p><strong>Recursos recomendados</strong>: Além da documentação oficial do React, o curso &quot;React - The Complete Guide&quot; de Maximilian Schwarzmüller na plataforma Udemy aborda esses conceitos de forma mais aprofundada.</p>\n<h3>3.3 Hooks</h3>\n<p>Hooks são uma nova adição ao React que permitem usar estado e outras características do React sem escrever uma classe. Os hooks mais utilizados são:</p>\n<ul>\n<li><strong>useState</strong>: Permite adicionar o estado React a componentes funcionais.</li>\n<li><strong>useEffect</strong>: Permite executar efeitos colaterais em componentes funcionais.</li>\n<li><strong>useContext</strong>: Permite compartilhar valores entre componentes sem a necessidade de passá-los explicitamente como props.</li>\n</ul>\n<p><strong>Exemplos Práticos</strong></p>\n<pre><code class=\"language-javascript\">import React, { useState, useEffect } from react;\n\nfunction ExemploHooks() {\n  const [contador, setContador] = useState(0);\n\n  useEffect(() =&gt; {\n    document.title = `Você clicou ${contador} vezes`;\n  });\n\n  return (\n    &lt;div&gt;\n      &lt;p&gt;Você clicou {contador} vezes&lt;/p&gt;\n      &lt;button onClick={() =&gt; setContador(contador + 1)}&gt; Clique aqui &lt;/button&gt;\n    &lt;/div&gt;\n  );\n}\n</code></pre>\n<h3>3.4 Roteamento com React Router</h3>\n<p>O React Router é uma biblioteca de roteamento para React que permite a implementação de navegação dinâmica em uma aplicação web. Ele suporta roteamento dinâmico, rotas aninhadas e carregamento preguiçoso, ajudando a criar uma experiência de usuário mais rica.</p>\n<p><strong>Configuração Básica</strong></p>\n<p>Para usar o React Router, você precisa instalar o pacote via NPM e configurar as rotas no componente principal da aplicação.</p>\n<p><strong>Recurso recomendado</strong>: A documentação oficial do React Router é um recurso importante para aprender mais sobre como configurar e utilizar o React Router.</p>\n<h3>3.5 Gerenciamento de Estado</h3>\n<p>Para aplicações maiores, o gerenciamento de estado pode se tornar complexo utilizando apenas Context ou useState.</p>\n<ul>\n<li><strong>Context API</strong>: É ideal para passar dados diretamente para componentes sem a necessidade de usar prop drilling.</li>\n<li><strong>Redux</strong>: É uma biblioteca de gerenciamento de estado previsível que ajuda a gerenciar o estado de toda a aplicação de forma centralizada.</li>\n</ul>\n<p><strong>Recurso recomendado</strong>: A documentação oficial do Redux é um recurso importante para aprender mais sobre como utilizar o Redux para gerenciamento de estado em aplicações React.</p>\n<h3>3.6 Exemplos Práticos e Boas Práticas</h3>\n<h4>Projeto Exemplo</h4>\n<p>Um exemplo prático que pode ser desenvolvido é criar uma lista de tarefas (To-Do List) utilizando React. Este projeto envolve o gerenciamento de estado, componentes funcionais e comunicação entre componentes.</p>\n<h4>Boas Práticas</h4>\n<ul>\n<li><strong>Estruturação de Pastas</strong>: Organize os arquivos de componentes, serviços e estilos de forma clara e lógica.</li>\n<li><strong>Nomeação de Componentes</strong>: Use nomes descritivos e consistentes para os seus componentes.</li>\n<li><strong>Otimização de Performance</strong>: Utilize técnicas como lazy loading, memoização e evite renderizações desnecessárias para melhorar a performance da aplicação.</li>\n</ul>\n<p><strong>Recurso adicional</strong>: O curso &quot;React - The Complete Guide&quot; de Maximilian Schwarzmüller na plataforma Udemy oferece uma visão abrangente desde os conceitos básicos até técnicas avançadas para desenvolvimento com React.</p>"},"hig_TWgclGptYO":{"content":"O Desenvolvimento Front-end com React é uma parte fundamental do curso Desenvolvimento Web Moderno. Através do React, é possível criar interfaces de usuário eficientes e de forma simplificada, utilizando componentes encapsulados. O uso de conceitos como JSX, Componentes Funcionais, State e Props, Hooks, React Router e Gerenciamento de Estado são abordados no curso, permitindo ao aluno construir aplicações complexas e de alta qualidade. Além disso, são apresentados exemplos práticos e boas práticas para auxiliar no desenvolvimento. Com recursos recomendados, como a documentação oficial do React e o curso “React - The Complete Guide” de Maximilian Schwarzmüller no Udemy, os alunos têm acesso a todo o conhecimento necessário para se tornarem desenvolvedores front-end proficientes com React.","order":2,"title":"Conclusão - Desenvolvimento Front-end com React","type":"highlight"}},"short":"Front-end","name":"Desenvolvimento Front-end com React"}}}